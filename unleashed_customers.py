#Unleashed API - Customers Export Version 1.1 17/01/2021

#Python 3.7
#Local packages: pip install -r requirements.txt
import requests
import pandas as pd
from pandas import DataFrame
from pandas.io.json import json_normalize
import pygsheets
from oauth2client.service_account import ServiceAccountCredentials
#Global packges.
import json
import hmac
import hashlib
import base64
import config as cfg
import time
from datetime import datetime
import re

#Wrap everything in a function for lambda to execute.
def lambda_handler(event, context):
	#Script startup.
	starttime = datetime.now()

	#Unleashed API details.
	api_id = cfg.unleashed_api_id
	api_key = cfg.unleashed_api_key
	api_url = "https://api.unleashedsoftware.com/"

	#Unleashed API endpoint inputs.
	endpoint = "Customers"
	query_key = "?"
	query = ""

	#As per Unleashed Software's API doco: The method signature must be generated by taking the query string, and creating a HMAC-SHA256 signature using your API key as the secret key.
	digest = hmac.new(key=api_key.encode('utf-8'),msg=query.encode('utf-8'),digestmod=hashlib.sha256).digest()
	signature = base64.b64encode(digest).decode()

	#Build the initial request URL and Headers.
	if not query:
		request_url = api_url + endpoint
	else:
		request_url = api_url + endpoint + query_key + query
	request_headers = {
		'api-auth-id': api_id,
		'Content-Type': 'application/json',
		'Accept': 'application/json',
		'api-auth-signature': signature
	}

	#Send the request for the first page.
	response = requests.get(url=request_url, headers=request_headers)

	#Parse the response and select keys.
	customers_parsed = response.json()
	cust_data = customers_parsed['Items']
	pagination = customers_parsed['Pagination']

	#Determine how many items and pages there are in the given endpoint.
	NumberOfItems = pagination.get('NumberOfItems')
	NumberOfPages = pagination.get('NumberOfPages')

	#Set initial PageNumber for the loop below.
	PageNumber = pagination.get('PageNumber') - 1
	print("Importing " + str(NumberOfItems) + " customer items from " + str(NumberOfPages) + " pages.")

	#Create empty lists that we will populate by appending our dataframes to as they're parsed.
	dataframe = []
	address_dataframe = []

	#The API limits JSON results to 200 items per page, so this loops as many times as there are pages.
	while PageNumber < NumberOfPages:
		PageNumber +=1
		if not query:
			request_url = api_url + endpoint + "/" + str(PageNumber)
		else:
			request_url = api_url + endpoint + "/" + str(PageNumber) + "/" + query_key + query
		response = requests.get(url=request_url, headers=request_headers)
		customers_parsed = response.json()
		cust_data = customers_parsed['Items']
		d = pd.io.json.json_normalize(cust_data)
		dataframe.append(d)
		print("Writing page " + str(PageNumber) + " of " + str(NumberOfPages) + " from " + request_url)

		#This loop looks at how many rows there are in cust_data and applies the Addresses field unpacking loop one each, then appends to the address_dataframe list above.
		for i in range(len(cust_data)):
			address_list = cust_data[i]['Addresses']
			address_key = "AddressType"
			keys_to_remove = []
			address_flat = {}
			for address in address_list:
				prefix = address[address_key]
				for key in address:
					if key == address_key or key in keys_to_remove:
						pass
					address_flat["{0}.{1}".format(prefix, key)] = address[key]
			result = pd.DataFrame([address_flat])
			address_dataframe.append(result)

	#Concatenate the address_dataframe list, re-index and drop the index column that's created.
	address_dataframe = pd.concat(address_dataframe, sort=False)
	address_dataframe = address_dataframe.reset_index()
	address_dataframe.drop(labels=['index'], axis=1,inplace = True)

	#Concatenate the dataframe list, re-index and drop unneeded columns.
	dataframe = pd.concat(dataframe, sort=False)
	dataframe = dataframe.reset_index()
	dataframe.drop(labels=['index', 'Addresses'], axis=1,inplace = True)

	#Concatenate our two prepared dataframes to give us the final dataframe to work on before export.
	final_dataframe = pd.concat([dataframe, address_dataframe], axis=1, sort=False)

	#Map columns and reorder them as necessary.
	print("Rearranging data...")
	CustomerCode = final_dataframe['CustomerCode']
	final_dataframe.drop(labels=['CustomerCode'], axis=1,inplace = True)
	final_dataframe.insert(0, 'CustomerCode', CustomerCode)

	CustomerName = final_dataframe['CustomerName']
	final_dataframe.drop(labels=['CustomerName'], axis=1,inplace = True)
	final_dataframe.insert(1, 'CustomerName', CustomerName)

	CustomerType = final_dataframe['CustomerType']
	final_dataframe.drop(labels=['CustomerType'], axis=1,inplace = True)
	final_dataframe.insert(2, 'CustomerType', CustomerType)

	Notes = final_dataframe['Notes']
	final_dataframe.drop(labels=['Notes'], axis=1,inplace = True)
	final_dataframe.insert(3, 'Notes', Notes)

	GSTVATNumber = final_dataframe['GSTVATNumber']
	final_dataframe.drop(labels=['GSTVATNumber'], axis=1,inplace = True)
	final_dataframe.insert(4, 'GSTVATNumber', GSTVATNumber)

	Currency = final_dataframe['Currency.CurrencyCode']
	final_dataframe.drop(labels=['Currency.CurrencyCode'], axis=1,inplace = True)
	final_dataframe.insert(5, 'Currency.CurrencyCode', Currency)

	Obsolete = final_dataframe['Obsolete']
	final_dataframe.drop(labels=['Obsolete'], axis=1,inplace = True)
	final_dataframe.insert(6, 'Obsolete', Obsolete)

	Taxable = final_dataframe['Taxable']
	final_dataframe.drop(labels=['Taxable'], axis=1,inplace = True)
	final_dataframe.insert(7, 'Taxable', Taxable)

	TaxCode = final_dataframe['TaxCode']
	final_dataframe.drop(labels=['TaxCode'], axis=1,inplace = True)
	final_dataframe.insert(8, 'TaxCode', TaxCode)

	BankName = final_dataframe['BankName']
	final_dataframe.drop(labels=['BankName'], axis=1,inplace = True)
	final_dataframe.insert(9, 'BankName', BankName)

	BankAccount = final_dataframe['BankAccount']
	final_dataframe.drop(labels=['BankAccount'], axis=1,inplace = True)
	final_dataframe.insert(10, 'BankAccount', BankAccount)

	PaymentTerm = final_dataframe['PaymentTerm']
	final_dataframe.drop(labels=['PaymentTerm'], axis=1,inplace = True)
	final_dataframe.insert(11, 'PaymentTerm', PaymentTerm)

	SellPriceTier = final_dataframe['SellPriceTier']
	final_dataframe.drop(labels=['SellPriceTier'], axis=1,inplace = True)
	final_dataframe.insert(12, 'SellPriceTier', SellPriceTier)

	DiscountRate = final_dataframe['DiscountRate']
	final_dataframe.drop(labels=['DiscountRate'], axis=1,inplace = True)
	final_dataframe.insert(13, 'DiscountRate', DiscountRate)

	#Bug fix: 17/01/2021 Getting KeyError when attempting to manipulate SalesPerson data - I haven't checked but I suspect it's because Unleashed no longer publish this in their API. Removing it from this script as it's not used by Butterbing anyway.
	# SalesPersonFullName = final_dataframe['SalesPerson.FullName']
	# final_dataframe.drop(labels=['SalesPerson.FullName'], axis=1,inplace = True)
	# final_dataframe.insert(14, 'SalesPerson.FullName', SalesPersonFullName)

	# SalesPersonEmail = final_dataframe['SalesPerson.Email']
	# final_dataframe.drop(labels=['SalesPerson.Email'], axis=1,inplace = True)
	# final_dataframe.insert(15, 'SalesPerson.Email', SalesPersonEmail)

	PostalAddressName = final_dataframe['Postal.AddressName']
	final_dataframe.drop(labels=['Postal.AddressName'], axis=1,inplace = True)
	final_dataframe.insert(14, 'Postal.AddressName', PostalAddressName)

	PostalStreetAddress = final_dataframe['Postal.StreetAddress']
	final_dataframe.drop(labels=['Postal.StreetAddress'], axis=1,inplace = True)
	final_dataframe.insert(15, 'Postal.StreetAddress', PostalStreetAddress)

	PostalStreetAddress2 = final_dataframe['Postal.StreetAddress2']
	final_dataframe.drop(labels=['Postal.StreetAddress2'], axis=1,inplace = True)
	final_dataframe.insert(16, 'Postal.StreetAddress2', PostalStreetAddress2)

	PostalSuburb = final_dataframe['Postal.Suburb']
	final_dataframe.drop(labels=['Postal.Suburb'], axis=1,inplace = True)
	final_dataframe.insert(17, 'Postal.Suburb', PostalSuburb)

	PostalCity = final_dataframe['Postal.City']
	final_dataframe.drop(labels=['Postal.City'], axis=1,inplace = True)
	final_dataframe.insert(18, 'Postal.City', PostalCity)

	PostalRegion = final_dataframe['Postal.Region']
	final_dataframe.drop(labels=['Postal.Region'], axis=1,inplace = True)
	final_dataframe.insert(19, 'Postal.Region', PostalRegion)

	PostalCountry = final_dataframe['Postal.Country']
	final_dataframe.drop(labels=['Postal.Country'], axis=1,inplace = True)
	final_dataframe.insert(20, 'Postal.Country', PostalCountry)

	PostalPostalCode = final_dataframe['Postal.PostalCode']
	final_dataframe.drop(labels=['Postal.PostalCode'], axis=1,inplace = True)
	final_dataframe.insert(21, 'Postal.PostalCode', PostalPostalCode)

	ShippingAddressName = final_dataframe['Shipping.AddressName']
	final_dataframe.drop(labels=['Shipping.AddressName'], axis=1,inplace = True)
	final_dataframe.insert(22, 'Shipping.AddressName', ShippingAddressName)

	ShippingStreetAddress = final_dataframe['Shipping.StreetAddress']
	final_dataframe.drop(labels=['Shipping.StreetAddress'], axis=1,inplace = True)
	final_dataframe.insert(23, 'Shipping.StreetAddress', ShippingStreetAddress)

	ShippingStreetAddress2 = final_dataframe['Shipping.StreetAddress2']
	final_dataframe.drop(labels=['Shipping.StreetAddress2'], axis=1,inplace = True)
	final_dataframe.insert(24, 'Shipping.StreetAddress2', ShippingStreetAddress2)

	ShippingSuburb = final_dataframe['Shipping.Suburb']
	final_dataframe.drop(labels=['Shipping.Suburb'], axis=1,inplace = True)
	final_dataframe.insert(25, 'Shipping.Suburb', ShippingSuburb)

	ShippingCity = final_dataframe['Shipping.City']
	final_dataframe.drop(labels=['Shipping.City'], axis=1,inplace = True)
	final_dataframe.insert(26, 'Shipping.City', ShippingCity)

	ShippingRegion = final_dataframe['Shipping.Region']
	final_dataframe.drop(labels=['Shipping.Region'], axis=1,inplace = True)
	final_dataframe.insert(27, 'Shipping.Region', ShippingRegion)

	ShippingCountry = final_dataframe['Shipping.Country']
	final_dataframe.drop(labels=['Shipping.Country'], axis=1,inplace = True)
	final_dataframe.insert(28, 'Shipping.Country', ShippingCountry)

	ShippingPostalCode = final_dataframe['Shipping.PostalCode']
	final_dataframe.drop(labels=['Shipping.PostalCode'], axis=1,inplace = True)
	final_dataframe.insert(29, 'Shipping.PostalCode', ShippingPostalCode)

	PhysicalAddressName = final_dataframe['Physical.AddressName']
	final_dataframe.drop(labels=['Physical.AddressName'], axis=1,inplace = True)
	final_dataframe.insert(30, 'Physical.AddressName', PhysicalAddressName)

	PhysicalStreetAddress = final_dataframe['Physical.StreetAddress']
	final_dataframe.drop(labels=['Physical.StreetAddress'], axis=1,inplace = True)
	final_dataframe.insert(31, 'Physical.StreetAddress', PhysicalStreetAddress)

	PhysicalStreetAddress2 = final_dataframe['Physical.StreetAddress2']
	final_dataframe.drop(labels=['Physical.StreetAddress2'], axis=1,inplace = True)
	final_dataframe.insert(32, 'Physical.StreetAddress2', PhysicalStreetAddress2)

	PhysicalSuburb = final_dataframe['Physical.Suburb']
	final_dataframe.drop(labels=['Physical.Suburb'], axis=1,inplace = True)
	final_dataframe.insert(33, 'Physical.Suburb', PhysicalSuburb)

	PhysicalCity = final_dataframe['Physical.City']
	final_dataframe.drop(labels=['Physical.City'], axis=1,inplace = True)
	final_dataframe.insert(34, 'Physical.City', PhysicalCity)

	PhysicalRegion = final_dataframe['Physical.Region']
	final_dataframe.drop(labels=['Physical.Region'], axis=1,inplace = True)
	final_dataframe.insert(35, 'Physical.Region', PhysicalRegion)

	PhysicalCountry = final_dataframe['Physical.Country']
	final_dataframe.drop(labels=['Physical.Country'], axis=1,inplace = True)
	final_dataframe.insert(36, 'Physical.Country', PhysicalCountry)

	PhysicalPostalCode = final_dataframe['Physical.PostalCode']
	final_dataframe.drop(labels=['Physical.PostalCode'], axis=1,inplace = True)
	final_dataframe.insert(37, 'Physical.PostalCode', PhysicalPostalCode)

	ContactFirstName = final_dataframe['ContactFirstName']
	final_dataframe.drop(labels=['ContactFirstName'], axis=1,inplace = True)
	final_dataframe.insert(38, 'ContactFirstName', ContactFirstName)

	ContactLastName = final_dataframe['ContactLastName']
	final_dataframe.drop(labels=['ContactLastName'], axis=1,inplace = True)
	final_dataframe.insert(39, 'ContactLastName', ContactLastName)

	Email = final_dataframe['Email']
	final_dataframe.drop(labels=['Email'], axis=1,inplace = True)
	final_dataframe.insert(40, 'Email', Email)

	EmailCC = final_dataframe['EmailCC']
	final_dataframe.drop(labels=['EmailCC'], axis=1,inplace = True)
	final_dataframe.insert(41, 'EmailCC', EmailCC)

	Website = final_dataframe['Website']
	final_dataframe.drop(labels=['Website'], axis=1,inplace = True)
	final_dataframe.insert(42, 'Website', Website)

	PhoneNumber = final_dataframe['PhoneNumber']
	final_dataframe.drop(labels=['PhoneNumber'], axis=1,inplace = True)
	final_dataframe.insert(43, 'PhoneNumber', PhoneNumber)

	FaxNumber = final_dataframe['FaxNumber']
	final_dataframe.drop(labels=['FaxNumber'], axis=1,inplace = True)
	final_dataframe.insert(44, 'FaxNumber', FaxNumber)

	MobileNumber = final_dataframe['MobileNumber']
	final_dataframe.drop(labels=['MobileNumber'], axis=1,inplace = True)
	final_dataframe.insert(45, 'MobileNumber', MobileNumber)

	DDINumber = final_dataframe['DDINumber']
	final_dataframe.drop(labels=['DDINumber'], axis=1,inplace = True)
	final_dataframe.insert(46, 'DDINumber', DDINumber)

	TollFreeNumber = final_dataframe['TollFreeNumber']
	final_dataframe.drop(labels=['TollFreeNumber'], axis=1,inplace = True)
	final_dataframe.insert(47, 'TollFreeNumber', TollFreeNumber)

	PrintInvoice = final_dataframe['PrintInvoice']
	final_dataframe.drop(labels=['PrintInvoice'], axis=1,inplace = True)
	final_dataframe.insert(48, 'PrintInvoice', PrintInvoice)

	PrintPackingSlipInsteadOfInvoice = final_dataframe['PrintPackingSlipInsteadOfInvoice']
	final_dataframe.drop(labels=['PrintPackingSlipInsteadOfInvoice'], axis=1,inplace = True)
	final_dataframe.insert(49, 'PrintPackingSlipInsteadOfInvoice', PrintPackingSlipInsteadOfInvoice)

	XeroSalesAccount = final_dataframe['XeroSalesAccount']
	final_dataframe.drop(labels=['XeroSalesAccount'], axis=1,inplace = True)
	final_dataframe.insert(50, 'XeroSalesAccount', XeroSalesAccount)

	CreatedOn = final_dataframe['CreatedOn']
	final_dataframe.drop(labels=['CreatedOn'], axis=1,inplace = True)
	final_dataframe.insert(51, 'CreatedOn', CreatedOn)

	LastModifiedOn = final_dataframe['LastModifiedOn']
	final_dataframe.drop(labels=['LastModifiedOn'], axis=1,inplace = True)
	final_dataframe.insert(52, 'LastModifiedOn', LastModifiedOn)

	#Drop leftover, unused columns.
	#Bug Fix: 17/01/2021 Removing  'SalesPerson', 'SalesPerson.Guid', 'SalesPerson.LastModifiedOn', 'SalesPerson.Obsolete' (as above) these keys appear to not be in the API anymore.
	final_dataframe.drop(labels=['BankBranch', 'CreatedBy', 'Currency.Description', 'Currency.Guid', 'Currency.LastModifiedOn', 'Guid', 'LastModifiedBy', 'Postal.IsDefault', 'Physical.IsDefault', 'SellPriceTierReference', 'SellPriceTierReference.Reference', 'Shipping.IsDefault', 'SourceId', 'StopCredit', 'TaxRate',  'Postal.AddressType', 'Physical.AddressType', 'Shipping.AddressType', 'XeroContactId', 'XeroCostOfGoodsAccount'], axis=1,inplace = True)

	#Parse timestamps.
	def parse_timestamp(string):
		pattern = "/Date\(|\)/"
		pattern = re.compile(pattern)
		try:
			timestamp = pattern.sub(
				string = string,
				repl = ""
			)
			return datetime.fromtimestamp(int(timestamp)/1000)
		except:
			return None
	final_dataframe['LastModifiedOn'] = final_dataframe['LastModifiedOn'].apply(parse_timestamp)
	final_dataframe['CreatedOn'] = final_dataframe['CreatedOn'].apply(parse_timestamp)

	#Connect to Google Sheets
	gc = pygsheets.authorize(service_file='client_secret.json')
	#Open spreadsheet and then workseet.
	sh = gc.open('Unleashed API Customers Master List')
	wks = sh.sheet1
	print("Exporting dataframe to Google Sheets...")
	#Set dataframe in worksheet.
	wks.set_dataframe(final_dataframe.fillna(''),(1,1),fit=True)
	finishtime = datetime.now() - starttime
	print("Update Complete in " + str(finishtime))
